storageClass:
  create: true
  type: gp2 # This configures SSDs (recommended).
#  provisioner: ebs.csi.aws.com # use this provisioner if using the self-managed Amazon EBS Container Storage Interface driver
  provisioner: kubernetes.io/aws-ebs # use this provisioner if using the Amazon EKS add-on
  volumeBindingMode: WaitForFirstConsumer
  reclaimPolicy: Delete # This should be Retain for a production deployment, but is set to delete to not keep TBs of disk space reserved
frontend:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb # aws load balancer controller ingressClass name
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-2:548543007731:certificate/65ad88c9-fb26-4148-81b1-fec95f438a10
      # additional aws alb ingress controller supported annotations
      # ...
    # replace with your actual domain
    host: github-sandbox.sourcegraph.com
  replicaCount: 2
  resources:
    limits:
      cpu: '4'
      memory: 6G
    requests:
      cpu: '4'
      memory: 3G
codeinsights-db:
  replicaCount: 1
  resources:
    limits:
      cpu: '4'
      memory: 4G
    requests:
      cpu: '2'
      memory: 2G
  storageSize: 200Gi
codeintel-db:
  replicaCount: 1
  resources:
    limits:
      cpu: '4'
      memory: 4G
    requests:
      cpu: '2'
      memory: 2G
  storageSize: 200Gi
gitserver:
  replicaCount: 1
  resources:
    limits:
      cpu: '6'
      memory: 25G
    requests:
      cpu: '3'
      memory: 25G
  storageSize: 650Gi
indexedSearch:
  replicaCount: 2
  resources:
    limits:
      cpu: '8'
      memory: 20G
    requests:
      cpu: '4'
      memory: 10G
  storageSize: 300Gi
indexedSearchIndexer:
  replicaCount: 1
  resources:
    limits:
      cpu: '4'
      memory: 20G
    requests:
      cpu: '2'
      memory: 10G
minio:
  replicaCount: 1
  resources:
    limits:
      cpu: '1'
      memory: 500M
    requests:
      cpu: '1'
      memory: 500M
  storageSize: 1Gi
pgsql:
  replicaCount: 1
  resources:
    limits:
      cpu: '4'
      memory: 8G
    requests:
      cpu: '4'
      memory: 8G
  storageSize: 200Gi
preciseCodeIntel:
  replicaCount: 1
  resources:
    limits:
      cpu: '2'
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
prometheus:
  replicaCount: 1
  resources:
    limits:
      cpu: '2'
      memory: 6G
    requests:
      cpu: 500m
      memory: 6G
  storageSize: 200Gi
redisCache:
  replicaCount: 1
  resources:
    limits:
      cpu: '1'
      memory: 1G
    requests:
      cpu: '1'
      memory: 1G
  storageSize: 100Gi
redisStore:
  replicaCount: 1
  resources:
    limits:
      cpu: '1'
      memory: 2G
    requests:
      cpu: 500m
      memory: 1G
  storageSize: 100Gi
searcher:
  replicaCount: 1
  resources:
    limits:
      cpu: '5'
      ephemeral-storage: 10G
      memory: 6G
    requests:
      cpu: '2'
      ephemeral-storage: 5G
      memory: 6G
  persistentVolume:
    create: true
    volumeName:
    storageSize: 50G
  podSecurityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
symbols:
  replicaCount: 1
  resources:
    limits:
      cpu: '3'
      ephemeral-storage: 5G
      memory: 5G
    requests:
      cpu: '2'
      ephemeral-storage: 3G
      memory: 5G
  persistentVolume:
    create: true
    volumeName:
    storageSize: 25G
  podSecurityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
syntectServer:
  replicaCount: 1
  resources:
    limits:
      cpu: '4'
      memory: 6G
    requests:
      cpu: 500m
      memory: 2G
worker:
  replicaCount: 1
  resources:
    limits:
      cpu: '2'
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
